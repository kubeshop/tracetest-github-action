---
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
name: Tracetest
description: GitHub Action for starting Tracetest CLI and Agent to run trace-based tests.
branding:
  icon: eye
  color: purple

inputs:
  version:
    description: 'Tracetest CLI version to install. Leave empty to use latest'
    default: ''
  token:
    description: 'Tracetest CLI user token'
  apiKey:
    description: 'Agent API Key'
  endpoint:
    description: 'Tracetest endpoint'
  configFile:
    description: 'Tracetest CLI custom config file'
  sleep:
    description: 'Seconds to wait before action finished (default as `3`)'
    default: '3'


# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputs-for-composite-actions
outputs:
  log:
    description: 'Path to agent log file'
    value: ${{ steps.main.outputs.log }}

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-actions
runs:
  using: composite
  steps:
    - id: validate-action-parameters
      name: Validate Tracetest Action Parameters
      shell: bash
      run: |
        echo "üîé Checking if one of the required parameters was passed to the action..."

        TRACETEST_TOKEN="${{ inputs.token }}"
        TRACETEST_ENDPOINT="${{ inputs.endpoint }}"
        TRACETEST_CONFIG_FILE_CONTENT="${{ inputs.configFile }}"

        if [ "$TRACETEST_TOKEN" == "" ] &&  [ "$TRACETEST_ENDPOINT" == "" ] &&  [ "$TRACETEST_CONFIG_FILE_CONTENT" == "" ]
        then
          echo "üü° You should define the 'token', 'endpoint' or 'configFile' parameter to use this action."
          echo "Please access https://github.com/kubeshop/tracetest-github-action to see more details on how to use this action."
          exit 1
        else
          echo "üü¢ Required parameters found."
        fi

    - id: install-tracetest
      name: Install Tracetest CLI
      shell: bash
      run: |
        curl -L https://tracetest.io/install | bash -s -- '${{ inputs.version }}'

    - id: configure-cli
      name: Configure Tracetest CLI
      shell: bash
      run: |
        # Helper functions

        # Group stdin to stderr with title
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines
        #   $1: group title
        #   stdin: logs
        #   stderr: grouped logs
        #   $?: 0 if successful and non-zero otherwise
        function kit::wf::group {
            echo "::group::$1"      >&2
            echo "$(< /dev/stdin)"  >&2
            echo '::endgroup::'     >&2
        }

        # Tracetest CLI configuration

        TRACETEST_TOKEN="${{ inputs.token }}"
        TRACETEST_ENDPOINT="${{ inputs.endpoint }}"
        TRACETEST_CONFIG_FILE_CONTENT="${{ inputs.configFile }}"

        if [ "$TRACETEST_TOKEN" != "" ]
        then
          kit::wf::group '‚öôÔ∏è Configure CLI' \
            <<<"tracetest configure --token *******"
            tracetest configure --token $TRACETEST_TOKEN
            exit 0
        fi
        if [ "$TRACETEST_ENDPOINT" != "" ]
        then
          kit::wf::group '‚öôÔ∏è Configure CLI' \
            <<<"tracetest configure --endpoint $TRACETEST_ENDPOINT"
            tracetest configure --endpoint $TRACETEST_ENDPOINT
            exit 0
        fi
        if [ "$TRACETEST_CONFIG_FILE_CONTENT" != "" ]
        then
          kit::wf::group '‚öôÔ∏è Configure CLI' \
            <<<"Copying config file content to ~/.tracetest/config.yml"
            cat $TRACETEST_CONFIG_FILE_CONTENT > ~/.tracetest/config.yml
        fi

    - id: start-agent
      name: Start Tracetest Agent
      shell: bash
      run: |
        # Helper functions

        # Group stdin to stderr with title
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines
        #   $1: group title
        #   stdin: logs
        #   stderr: grouped logs
        #   $?: 0 if successful and non-zero otherwise
        function kit::wf::group {
            echo "::group::$1"      >&2
            echo "$(< /dev/stdin)"  >&2
            echo '::endgroup::'     >&2
        }

        # Set stdin as value to output of current step with given name
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-output-parameter
        # https://renehernandez.io/snippets/multiline-strings-as-a-job-output-in-github-actions/
        #   $1: output name
        #   $2: masked value in logs
        #   stdin: output value
        #   stderr: grouped logs
        #   $?: 0 if successful and non-zero otherwise
        function kit::wf::output {
            local val
            val="$(< /dev/stdin)"
            { # https://www.gnu.org/software/bash/manual/bash.html#Command-Grouping
                echo "$1<<__GITHUB_OUTPUT__"
                echo "$val"
                echo '__GITHUB_OUTPUT__'
            } >> "$GITHUB_OUTPUT"
            kit::wf::group "üñ®Ô∏è step output '$1' has been set" <<< "${2:-$val}"
        }

        # Tracetest Agent configuration

        TRACETEST_API_KEY="${{ inputs.apiKey }}"
        SLEEP_TIME="${{ inputs.sleep }}"
        AGENT_LOG="${{ runner.temp }}/tracetest-agent.$RANDOM.log"

        if [ "$TRACETEST_API_KEY" = "" ]
        then
          echo "üü° Tracetest API Key not defined in 'apiKey' action parameter, skipping agent setup"
          exit 0
        fi

        kit::wf::group 'üü¢ Running background agent daemon' \
          <<<"tracetest start --api-key ********"
        nohup tracetest start --api-key $TRACETEST_API_KEY' < /dev/null &> "$AGENT_LOG" &
        kit::wf::output 'log' <<< "$AGENT_LOG"
        sleep $SLEEP_TIME
        kit::wf::group 'üîé Current agent log' < "$AGENT_LOG"
