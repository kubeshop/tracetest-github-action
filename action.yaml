---
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
name: Tracetest
description: GitHub Action for starting Tracetest CLI and Agent to run trace-based tests.
branding:
  icon: eye
  color: purple

inputs:
  version:
    description: 'Tracetest CLI version to install. Leave empty to use latest'
    default: ''
  token:
    description: 'Tracetest CLI user token'
  apiKey:
    description: 'Agent API Key'
  endpoint:
    description: 'Tracetest endpoint'
  # Due to a Github limitation, this string should be escaped with \n
  # https://github.com/orgs/community/discussions/12882
  configFile:
    description: 'Tracetest CLI custom config file string'
  sleep:
    description: 'Seconds to wait before action finished (default as `3`)'
    default: '3'


# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputs-for-composite-actions
outputs:
  log:
    description: 'Path to agent log file'
    value: ${{ steps.main.outputs.log }}

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-actions
runs:
  using: composite
  steps:
    - id: validate-action-parameters
      name: Validate Tracetest Action Parameters
      shell: bash
      run: |
        echo "游댍 Checking if one of the required parameters was passed to the action..."

        TRACETEST_TOKEN="${{ inputs.token }}"
        TRACETEST_ENDPOINT="${{ inputs.endpoint }}"
        TRACETEST_CONFIG_FILE_CONTENT="${{ inputs.configFile }}"

        if [ "$TRACETEST_TOKEN" == "" ] &&  [ "$TRACETEST_ENDPOINT" == "" ] &&  [ "$TRACETEST_CONFIG_FILE_CONTENT" == "" ]
        then
          echo "游리 You should define the 'token', 'endpoint' or 'configFile' parameter to use this action"
          echo "Please access https://github.com/kubeshop/tracetest-github-action to see more details on how to use this action"
          exit 1
        else
          echo "游릭 Required parameters found"
        fi

    - id: install-tracetest
      name: Install Tracetest CLI
      shell: bash
      run: |
        echo '游뚴 Installing Tracetest CLI...'
        curl -L https://tracetest.io/install | bash -s -- '${{ inputs.version }}'
        echo "游릭 Tracetest CLI successfully installed"

    - id: configure-cli
      name: Configure Tracetest CLI
      shell: bash
      run: |
        echo '游뚴 Configuring CLI...'

        TRACETEST_TOKEN="${{ inputs.token }}"
        TRACETEST_ENDPOINT="${{ inputs.endpoint }}"
        TRACETEST_CONFIG_FILE_CONTENT="${{ inputs.configFile }}"

        if [ "$TRACETEST_TOKEN" != "" ]
        then
          tracetest configure --token $TRACETEST_TOKEN
          echo "游릭 Tracetest CLI successfully configured with token"
          exit 0
        fi
        if [ "$TRACETEST_ENDPOINT" != "" ]
        then
          tracetest configure --endpoint $TRACETEST_ENDPOINT
          echo "游릭 Tracetest CLI successfully configured with endpoint"
          exit 0
        fi
        if [ "$TRACETEST_CONFIG_FILE_CONTENT" != "" ]
        then
          mkdir ~/.tracetest
          echo -e $TRACETEST_CONFIG_FILE_CONTENT > ~/.tracetest/config.yml
          cat ~/.tracetest/config.yml
          echo "游릭 Tracetest CLI successfully configured with configFile"
        fi

    # To understand nohup magic: https://unix.stackexchange.com/questions/269805/how-can-i-detach-a-process-from-a-bash-script
    - id: start-agent
      name: Start Tracetest Agent
      shell: bash
      run: |
        echo '游뚴 Configuring Tracetest Agent...'

        TRACETEST_API_KEY="${{ inputs.apiKey }}"
        SLEEP_TIME="${{ inputs.sleep }}"
        AGENT_LOG="${{ runner.temp }}/tracetest-agent.$RANDOM.log"

        if [ "$TRACETEST_API_KEY" = "" ]
        then
          echo "游리 Tracetest API Key not defined in 'apiKey' action parameter, skipping agent setup"
          exit 0
        fi

        AGENT_LOG="${{ runner.temp }}/tracetest-agent.$RANDOM.log"
        echo '游릭 Running background agent daemon'
        nohup tracetest start --api-key $TRACETEST_API_KEY --mode verbose < /dev/null &> "$AGENT_LOG" &
        echo $AGENT_LOG
        sleep $SLEEP_TIME
